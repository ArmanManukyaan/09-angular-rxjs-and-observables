{"ast":null,"code":"import { Observable, ReplaySubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nclass SubjectComponent {\n  ngOnInit() {\n    // let obs = new Observable((observer) => {\n    //     observer.next(Math.random());\n    // });\n    // const subject = new Subject();\n    const subject = new ReplaySubject();\n    // const subject = new BehaviorSubject<number>(100);\n    // Subscriber 1\n    subject.subscribe(data => {\n      console.log(data);\n    });\n    // Subscriber 2\n    subject.subscribe(data => {\n      console.log(data);\n    });\n    subject.next(100);\n    subject.next(200);\n    subject.next(300);\n    // subject.next(2020);\n    // AJAX CALL\n    //     const subject = new Subject();\n    //     const data = ajax('https://randomuser.me/api/');\n    //     data.subscribe((res) => {\n    //         console.log(res)\n    //     })\n    //\n    //     data.subscribe((res) => {\n    //         console.log(res)\n    //     })\n    //\n    //     data.subscribe((res) => {\n    //         console.log(res)\n    //     })\n    //\n    //     data.subscribe(subject);\n    //\n    // }\n    // Promise vs Observable\n    const promise = new Promise((resolve, reject) => {});\n    const obs = new Observable();\n  }\n  static #_ = this.ɵfac = function SubjectComponent_Factory(t) {\n    return new (t || SubjectComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SubjectComponent,\n    selectors: [[\"app-subject\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"container\"]],\n    template: function SubjectComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Subjects in RXJS\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\".container[_ngcontent-%COMP%]{\\n    margin: 50px 100px;\\n    padding: 10px 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3ViamVjdC9zdWJqZWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsa0JBQWtCO0FBQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lcntcclxuICAgIG1hcmdpbjogNTBweCAxMDBweDtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}\nexport { SubjectComponent };","map":{"version":3,"names":["Observable","ReplaySubject","SubjectComponent","ngOnInit","subject","subscribe","data","console","log","next","promise","Promise","resolve","reject","obs","_","_2","selectors","decls","vars","consts","template","SubjectComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\09-angular-rxjs-and-observables\\src\\app\\subject\\subject.component.ts","C:\\09-angular-rxjs-and-observables\\src\\app\\subject\\subject.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {Observable, ReplaySubject} from \"rxjs\";\n\n@Component({\n    selector: 'app-subject',\n    templateUrl: './subject.component.html',\n    styleUrls: ['./subject.component.css']\n})\nexport class SubjectComponent implements OnInit {\n    ngOnInit(): void {\n        // let obs = new Observable((observer) => {\n        //     observer.next(Math.random());\n        // });\n        // const subject = new Subject();\n        const subject = new ReplaySubject();\n        // const subject = new BehaviorSubject<number>(100);\n\n\n        // Subscriber 1\n        subject.subscribe((data) => {\n            console.log(data);\n        });\n\n        // Subscriber 2\n        subject.subscribe((data) => {\n            console.log(data)\n        });\n\n        subject.next(100);\n        subject.next(200);\n        subject.next(300);\n\n        // subject.next(2020);\n\n        // AJAX CALL\n        //     const subject = new Subject();\n        //     const data = ajax('https://randomuser.me/api/');\n        //     data.subscribe((res) => {\n        //         console.log(res)\n        //     })\n        //\n        //     data.subscribe((res) => {\n        //         console.log(res)\n        //     })\n        //\n        //     data.subscribe((res) => {\n        //         console.log(res)\n        //     })\n        //\n        //     data.subscribe(subject);\n        //\n        // }\n\n        // Promise vs Observable\n        const promise = new Promise((resolve, reject) => {\n\n        });\n\n        const obs = new Observable();\n        \n    }\n}\n","<div class=\"container\">\n    <h2>Subjects in RXJS</h2>\n</div>\n"],"mappings":"AACA,SAAQA,UAAU,EAAEC,aAAa,QAAO,MAAM;;AAE9C,MAKaC,gBAAgB;EACzBC,QAAQA,CAAA;IACJ;IACA;IACA;IACA;IACA,MAAMC,OAAO,GAAG,IAAIH,aAAa,EAAE;IACnC;IAGA;IACAG,OAAO,CAACC,SAAS,CAAEC,IAAI,IAAI;MACvBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACrB,CAAC,CAAC;IAEF;IACAF,OAAO,CAACC,SAAS,CAAEC,IAAI,IAAI;MACvBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACrB,CAAC,CAAC;IAEFF,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC;IACjBL,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC;IACjBL,OAAO,CAACK,IAAI,CAAC,GAAG,CAAC;IAEjB;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI,CAEhD,CAAC,CAAC;IAEF,MAAMC,GAAG,GAAG,IAAId,UAAU,EAAE;EAEhC;EAAC,QAAAe,CAAA,G;qBApDQb,gBAAgB;EAAA;EAAA,QAAAc,EAAA,G;UAAhBd,gBAAgB;IAAAe,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCR7BE,EAAA,CAAAC,cAAA,aAAuB;QACfD,EAAA,CAAAE,MAAA,uBAAgB;QAAAF,EAAA,CAAAG,YAAA,EAAK;;;;;;SDOhB1B,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}